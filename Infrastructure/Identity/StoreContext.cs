// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Infrastructure;
using ApplicationCore.Entities;

namespace Infrastructure.Identity
{
    public partial class StoreContext : DbContext
    {
        public StoreContext()
        {
        }

        public StoreContext(DbContextOptions<StoreContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Buyers> Buyers { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<Managers> Managers { get; set; }
        public virtual DbSet<Manufacturer> Manufacturer { get; set; }
        public virtual DbSet<OrderDetails> OrderDetails { get; set; }
        public virtual DbSet<OrdersLogin> OrdersLogin { get; set; }
        public virtual DbSet<OrdersNoLogin> OrdersNoLogin { get; set; }
        public virtual DbSet<ProductDescription> ProductDescription { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<Sections> Sections { get; set; }
        public virtual DbSet<ShopcartItems> ShopcartItems { get; set; }
        public virtual DbSet<ShopcartItemsNoLogin> ShopcartItemsNoLogin { get; set; }
        public virtual DbSet<Shopcarts> Shopcarts { get; set; }
        public virtual DbSet<ShopcartsNoLogin> ShopcartsNoLogin { get; set; }
        public virtual DbSet<Subcategories> Subcategories { get; set; }
        public virtual DbSet<SubcategoryDescriptionTitle> SubcategoryDescriptionTitle { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Buyers>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Patronymic)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Surname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Categories>(entity =>
            {
                entity.Property(e => e.ImagePath)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Section)
                    .WithMany(p => p.Categories)
                    .HasForeignKey(d => d.SectionId)
                    .HasConstraintName("fk_CategoriesSections");
            });

            modelBuilder.Entity<Managers>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Patronymic)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Surname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Manufacturer>(entity =>
            {
                entity.Property(e => e.ImagePath)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrderDetails>(entity =>
            {
                entity.HasKey(e => e.OrderId)
                    .HasName("PK__OrderDet__C3905BCFF32B1630");

                entity.Property(e => e.OrderId).ValueGeneratedNever();

                entity.Property(e => e.ClosedDate).HasColumnType("datetime");

                entity.Property(e => e.ManagerId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Manager)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.ManagerId)
                    .HasConstraintName("fk_OrderDetailsManagers");

                entity.HasOne(d => d.Order)
                    .WithOne(p => p.OrderDetails)
                    .HasForeignKey<OrderDetails>(d => d.OrderId)
                    .HasConstraintName("fk_OrderDetailsOrders");

                entity.HasOne(d => d.OrderNavigation)
                    .WithOne(p => p.OrderDetails)
                    .HasForeignKey<OrderDetails>(d => d.OrderId)
                    .HasConstraintName("fk_OrderDetailsOrdersNoLogin");
            });

            modelBuilder.Entity<OrdersLogin>(entity =>
            {
                entity.Property(e => e.ScheduledDate).HasColumnType("datetime");

                entity.Property(e => e.ShopcartId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TotalPrice).HasColumnType("money");

                entity.HasOne(d => d.Shopcart)
                    .WithMany(p => p.OrdersLogin)
                    .HasForeignKey(d => d.ShopcartId)
                    .HasConstraintName("fk_OrdersShopcartItems");
            });

            modelBuilder.Entity<OrdersNoLogin>(entity =>
            {
                entity.Property(e => e.BuyerName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerPatronymic)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerSurname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduledDate).HasColumnType("datetime");

                entity.Property(e => e.ShopcartId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TotalPrice).HasColumnType("money");

                entity.HasOne(d => d.Shopcart)
                    .WithMany(p => p.OrdersNoLogin)
                    .HasForeignKey(d => d.ShopcartId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_OrderNoLoginShopcartItemNoLogin");
            });

            modelBuilder.Entity<ProductDescription>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DescriptionText)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.DescriptionTitle)
                    .WithMany()
                    .HasForeignKey(d => d.DescriptionTitleId)
                    .HasConstraintName("fk_ProductsDesTitle");

                entity.HasOne(d => d.Product)
                    .WithMany()
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_ProductsDescription");
            });

            modelBuilder.Entity<Products>(entity =>
            {
                entity.Property(e => e.ImagePath)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .IsUnicode(false);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("fk_ProductsCategory");

                entity.HasOne(d => d.Manufacturer)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.ManufacturerId)
                    .HasConstraintName("fk_ProductsManufacturer");

                entity.HasOne(d => d.Subcategory)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.SubcategoryId)
                    .HasConstraintName("fk_ProductsSubcategory");
            });

            modelBuilder.Entity<Sections>(entity =>
            {
                entity.Property(e => e.ImagePath)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ShopcartItems>(entity =>
            {
                entity.HasKey(e => e.ShopcartId)
                    .HasName("PK__Shopcart__DF128223C8F3DE9B");

                entity.Property(e => e.ShopcartId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ShopcartItems)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_ShopcartItemsProducts");

                entity.HasOne(d => d.Shopcart)
                    .WithOne(p => p.ShopcartItems)
                    .HasForeignKey<ShopcartItems>(d => d.ShopcartId)
                    .HasConstraintName("fk_ShopcartItemsShopcarts");
            });

            modelBuilder.Entity<ShopcartItemsNoLogin>(entity =>
            {
                entity.HasKey(e => e.ShopcartId)
                    .HasName("PK__Shopcart__DF128223C88A618B");

                entity.Property(e => e.ShopcartId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ShopcartItemsNoLogin)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK__ShopcartI__Produ__634EBE90");

                entity.HasOne(d => d.Shopcart)
                    .WithOne(p => p.ShopcartItemsNoLogin)
                    .HasForeignKey<ShopcartItemsNoLogin>(d => d.ShopcartId)
                    .HasConstraintName("fk_ShopcartItemsNoLoginShopcartsNoLogin");
            });

            modelBuilder.Entity<Shopcarts>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Buyer)
                    .WithMany(p => p.Shopcarts)
                    .HasForeignKey(d => d.BuyerId)
                    .HasConstraintName("fk_ShopcartsBuyers");
            });

            modelBuilder.Entity<ShopcartsNoLogin>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Subcategories>(entity =>
            {
                entity.Property(e => e.ImagePath)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Subcategories)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("fk_SubcategoryCategory");
            });

            modelBuilder.Entity<SubcategoryDescriptionTitle>(entity =>
            {
                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Subcategory)
                    .WithMany(p => p.SubcategoryDescriptionTitle)
                    .HasForeignKey(d => d.SubcategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_DescriptionSubcategory");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}